/***************************************************************************
 *   Copyright (C) 2023 by Madina Macow                                    *
 *                                             				   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

/***************************************************************************
 *
 * 1.  NAME
 *
 * 2.  DESCRIPTION
 *     ask numbers from user, and calculate together all numbers that are
 *     dividable by three
 *
 * 3.  VERSIONS
 *       Original:
 *         25.5.2023 / madina
 *
 *       Version history:
 *       $Log$
 *
 ***************************************************************************/

/*--------------------------------------------------------------------------*
 *    HEADER FILES                                                          *
 *--------------------------------------------------------------------------*/
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>



/*--------------------------------------------------------------------------*
 *    GLOBAL VARIABLES                                                      *
 *--------------------------------------------------------------------------*/
/* Control flags */
#define DEBUG
#define ROWS 9
#define COLS 9

/* Globaal constants */

/* Globaal variables */

/* Globaal structures */
struct cell

{
	int current; /* current situation, which is visible on screen */

	int future; /* temporary calculation area for next round calculation */

};

/*-------------------------------------------------------------------*
 *    FUNCTION PROTOTYPES                                             *
 *--------------------------------------------------------------------*/
void draw_Board(struct cell board[ROWS][COLS]);
void print_Board(struct cell board[ROWS][COLS]);
void update_Board(struct cell board[ROWS][COLS]);
int count_Neighbors(struct cell board[ROWS][COLS], int row, int col);

/*********************************************************************
 *    MAIN PROGRAM                                                      *
 **********************************************************************/

int main(void) {
	struct cell board[ROWS][COLS] = {0, 0};
	srand(time(NULL));

// Initialize the board
	draw_Board(board);
 // Run the simulation for a certain number of generations
	int i = 0;
	for (i = 0; i < 10; i++)
	{

		print_Board(board);
		update_Board(board);
	}
	return 0;


} /* end of main */

/*********************************************************************
 *    FUNCTIONS                                                       *
 **********************************************************************/

/*********************************************************************
;	F U N C T I O N    D E S C R I P T I O N
;---------------------------------------------------------------------
; NAME:draw_Board
; DESCRIPTION:  This function sets the initial state of the game board by randomly generating a state for each cell or
 by hard-coding specific cell values for testing purposes
;Input: board  array
;Output:none
; Used global variables: none
; REMARKS when using this function:
;this function initializes the game board by setting the initial state of the cells
;*********************************************************************/
void draw_Board(struct cell board[ROWS][COLS])
{
	int i, j;

	for (i = 0; i < ROWS; i++)
	{
		for (j = 0; j < COLS; j++)
		{

			board[i][j].current = rand() % 2;
			// checking  cells
			// board[3][4].current = 1;
			// board[4][4].current = 1;
			// board[2][4].current = 1;

			// checking edges cell
			board[1][8].current = 1;
			board[2][8].current = 1;
			board[3][8].current = 1;




		}
	}
}
/* end of drow_Board*/



/*********************************************************************
;	F U N C T I O N    D E S C R I P T I O N
;---------------------------------------------------------------------
; NAME:print_Board
; DESCRIPTION: funcion  representing a game board prints the current state of the board to the console.
;	Input: none
;	Output: live cells is represented by "X" and death cells represented by "."
;  Used global variables: none
; REMARKS when using this function:
;     make sure to pass in a 2D array of struct cell representing the current state of the game board.
;*********************************************************************/
void print_Board(struct cell board[ROWS][COLS])
{
	int i, j;
	printf("Current State\n");
	for (i = 0; i < ROWS; i++)
	{
		for (j = 0; j < COLS; j++)
		{

			if (board[i][j].current == 1)
			{
				// X is 1 .is death
				printf("|X ");
			}
			else
			{
				printf("|. ");
			}
		}
		printf("|\n");
	}
	printf("\n");
} /* end of print_Board*/
/*********************************************************************
;	F U N C T I O N    D E S C R I P T I O N
;---------------------------------------------------------------------
; NAME:count_Neighbors
; DESCRIPTION: This function counts the number of live neighbors for a cell on a game board represented by a 2D array of cells.
;It handles edge wrapping so that cells on the opposite side of the board are also considered neighbors.
; The function returns the count of live neighbors for the given cell
;Input: none
;Output: none
;Used global variables: none
;REMARKS when using this function:make sure to pass in a valid 2D array of cells representing the game board,
along with valid row and column indices for the cell you want to count the neighbors for. Also note that this function handles edge wrapping
;*********************************************************************/
// counting neighbors
int count_Neighbors(struct cell board[ROWS][COLS], int row, int col)
{
	int i, j;
	int count = 0;


	// count live neighbors
	for (i = row - 1; i <= row + 1; i++)
	{
		for (j = col - 1; j <= col + 1; j++)
		{
			if (i == row && j == col)
			{
				// skipping  the current cell
				continue;
			}

			if (i < 0 || j < 0 || i >= ROWS || j >= COLS)
			{
				// skip cells that are outside the board
				continue;
			}
			 // wrap edges
            int x = (i + ROWS) % ROWS;
            int y = (j + COLS) % COLS;

            // count number of neighbors
            count += board[x][y].current;

		}
	}

	return count;
}
 /* end of count_Neighbor*/
/*********************************************************************
;	F U N C T I O N    D E S C R I P T I O N
;---------------------------------------------------------------------
; NAME:update_board
; DESCRIPTION: The function  takes a 2D array of struct cell representing the game board,
 applies the rules of Conway's Game of Life to each cell and updates their status for the next generation(future state)
;Input: checkes reles of Conway's Game of Life
rules are
If a live cell has less than 2 live neighbors, it dies due to loneliness.
If a live cell has more than 3 live neighbors, it dies due to overpopulation.
If a dead cell has exactly 3 live neighbors, it becomes alive due to reproduction.
If a live cell has 2 or 3 live neighbors, it survives to the next generation.
If a dead cell has less than 3 or more than 3 live neighbors, it remains dead.
;Output:nonei
;Used global variables: none
; REMARKS when using this function:
;  make sure to pass in a valid board and call it repeatedly to simulate multiple generations.
;*********************************************************************/

void update_Board(struct cell board[ROWS][COLS])
{
	int i, j;
	int neighbors;
	for (i = 0; i < ROWS; i++)
	{
		for (j = 0; j < COLS; j++)
		{
			neighbors = count_Neighbors(board, i, j);

			// Loneliness
			if ((board[i][j].current == 1) && (neighbors < 2))
			{
				board[i][j].future = 0; // cell dies
			}
			// Overpopulation
			else if ((board[i][j].current == 1) && (neighbors > 3))
			{
				board[i][j].future = 0; // cell dies
			}
			// Reproduction
			else if ((board[i][j].current == 0) && (neighbors == 3))
			{
				board[i][j].future = 1; // cell becomes alive
			}
			// else back to current
			else
			{
				board[i][j].future = board[i][j].current;
			}
		}
	}

	// Copy future to current
	for (i = 0; i < ROWS; i++)
	{
		for (j = 0; j < COLS; j++)
		{
			board[i][j].current = board[i][j].future;
		}
	}

	printf("Next Generation\n");

	for (i = 0; i < ROWS; i++)
	{
		for (j = 0; j < COLS; j++)
		{
			board[i][j].current = board[i][j].future;

			if (board[i][j].future == 1)
			{
				printf("|X ");
			}
			else
			{
				printf("|. ");
			}
		}
		printf("|\n");
	}
}//end of update_board
